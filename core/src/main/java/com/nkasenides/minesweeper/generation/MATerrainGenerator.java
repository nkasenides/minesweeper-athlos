/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Framework: http://nkasenides.github.io/athlos
  Generated on: 16-11-2021 12:37:22
  Athlos Project Editor, v0.1.0 BETA
-------------------------------------------------------------------------------- */

package com.nkasenides.minesweeper.generation;

import com.nkasenides.minesweeper.model.*;
import com.nkasenides.minesweeper.proto.*;
import com.nkasenides.athlos.model.TerrainGenerator;
import com.raylabz.jsec.Hashing;
import com.nkasenides.athlos.exception.ChunkOutOfBoundsException;
import java.util.HashMap;
import java.util.UUID;

public class MATerrainGenerator extends TerrainGenerator<MAWorld, MATerrainChunk, MATerrainCell>{

    public MATerrainGenerator(MAWorld world) {
        super(world);
    }

    protected final MATerrainCell generateCell(int cellRow, int cellCol) {    
        final MATerrainCell cell = new MATerrainCell();        
        cell.setPosition(new MatrixPosition(cellRow, cellCol));        
        //TODO - Define custom cell properties here.        
        return cell;        
    }    
    
    public final MATerrainCell acquireCell(final int cellRow, final int cellCol) throws ChunkOutOfBoundsException {
        if (world.cellIsInBounds(cellRow, cellCol)) {
            return generateCell(cellRow, cellCol);
        }
        else {
            throw new ChunkOutOfBoundsException(cellRow, cellCol);
        }
    }

    public final MATerrainChunk generateChunk(final int chunkRow, final int chunkCol) {

        final int chunkStartRow = MATerrainChunk.getChunkStartRowFromChunkRow(chunkRow);
        final int chunkLastRow = MATerrainChunk.getChunkLastRowFromChunkRow(chunkRow);
        final int chunkStartCol = MATerrainChunk.getChunkStartColFromChunkCol(chunkCol);
        final int chunkLastCol = MATerrainChunk.getChunkLastColFromChunkCol(chunkCol);

        MATerrainChunk chunk = new MATerrainChunk();
        chunk.setWorldID(world.getId());
        chunk.setId(UUID.randomUUID().toString());
        chunk.setPosition(new MatrixPosition(chunkRow, chunkCol));
        HashMap<String, MATerrainCell> cells = new HashMap<>();

        for (int c = chunkStartCol; c <= chunkLastCol; c++) {
            for (int r = chunkStartRow; r <= chunkLastRow; r++) {
                MATerrainCell cell = acquireCell(r, c);
                cells.put(Hashing.hash(r + "," + c), cell);
            }
        }
        chunk.setCells(cells);

        return chunk;
    }

}

