/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Framework: http://nkasenides.github.io/athlos
  Generated on: 16-11-2021 12:37:22
  Athlos Project Editor, v0.1.0 BETA
-------------------------------------------------------------------------------- */

package com.nkasenides.minesweeper.persistence;


import com.nkasenides.athlos.persistence.*;
import com.nkasenides.minesweeper.model.*;
import com.raylabz.objectis.Objectis;

import java.util.List;
import java.util.Collection;


public class MAWorldSessionDAO implements WorldBasedDAO<MAWorldSession> {


    @Override
    public boolean create(MAWorldSession object) {
        Objectis.create(object); //NEW
        return true; //NEW
    }

    @Override
    public boolean update(MAWorldSession object) {
        Objectis.update(object); //NEW
        return true; //NEW
    }

    @Override
    public boolean delete(MAWorldSession object) {
        Objectis.delete(object); //NEW
        return true; //NEW
    }

    @Override
    public MAWorldSession get(String itemID) {
        return Objectis.get(MAWorldSession.class, itemID); //NEW
    }

    @Override
    public MAWorldSession getForWorld(String worldID, String itemID) {
        //NEW
        return Objectis.collection(MAWorldSession.class,worldID + "_worldSessions")
                .filter()
                .whereEqualTo("worldID", itemID)
                .limit(1)
                .fetch()
                .getItems()
                .get(0);
    }

    @Override
    public Collection<MAWorldSession> listForWorld(String worldID) {
        return Objectis.collection(MAWorldSession.class,worldID + "_worldSessions").list();//NEW
    }

    /**
     * Retrieves the player of the provided session.
     * @param worldSessionID The session's ID.
     * @return Returns a player object 
     */
    public MAPlayer getPlayer(final String worldSessionID) {
        final MAWorldSession maWorldSession = Objectis.get(MAWorldSession.class, worldSessionID); //NEW
        return Objectis.get(MAPlayer.class, maWorldSession.getPlayerID()); //NEW
    }

    /**
     * Retrieves the world session for the specific player in a specific world.
     * @param playerID The player ID.
     * @param worldID The world ID.
     * @return Returns a WorldSession.
     */

    public MAWorldSession getForPlayerAndWorld(final String playerID, final String worldID) {
        //NEW
        return Objectis.collection(MAWorldSession.class,worldID + "_worldSessions")
                .filter()
                .whereEqualTo("worldID", worldID)
                .whereEqualTo("playerID", playerID)
                .limit(1)
                .fetch()
                .getItems()
                .get(0);
    }

    /**
     * Retrieves multiple world sessions using the provided IDs.
     * @param ids A list of world session IDs.
     * @return Returns a list of world sessions.
     */
    public List<MAWorldSession> getMany(List<String> ids) {
        return Objectis.getMany(MAWorldSession.class, ids); //NEW
    }


}


