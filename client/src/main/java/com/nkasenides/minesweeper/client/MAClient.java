/* --------------------------------------------------------------------------------
  This file was automatically generated by the Athlos Project Editor.
  Athlos Framework: http://nkasenides.github.io/athlos
  Generated on: 16-11-2021 12:37:22
  Athlos Project Editor, v0.1.0 BETA
-------------------------------------------------------------------------------- */

package com.nkasenides.minesweeper.client;
import com.nkasenides.minesweeper.client.stubs.Reveal;
import com.nkasenides.minesweeper.client.ui.PlayerGameForm;
import com.nkasenides.minesweeper.model.*;
import com.nkasenides.minesweeper.proto.*;
import com.nkasenides.athlos.client.DedicatedGameClient;

import javax.xml.transform.OutputKeys;
import java.util.ArrayList;
import java.util.HashMap;


public class MAClient extends DedicatedGameClient<MAPartialStateProto, MAGameSession, MAWorldSession, MAPlayer, MAWorld, MAEntityProto, MATerrainCellProto> {

    private final String name;
    private ArrayList<MAWorld> listOfWorlds;
    private MAGameSession gameSession;
    private MAWorldSession worldSession;
    private GameState gameState;
    private HashMap<String, MATerrainCellProto> board;
    private final MAStubManager stubs;
    public static PlayerGameForm gameForm;

    public MAClient(String ipAddress, int PORT, String name) {
        super(ipAddress, PORT);
        this.name = name;
        this.stubs = new MAStubManager(mainChannel, this);
        gameForm = new PlayerGameForm(this, name);

        ConnectResponse connectResponse = stubs.connect.sendAndWait(ConnectRequest.newBuilder()
                .setPlayerName(name)
                .build()
        );
        if (connectResponse.getStatus() == ConnectResponse.Status.OK) {
            System.out.println("Connected to server, game session: " + connectResponse.getGameSession().getId());
            gameSession = connectResponse.getGameSession().toObject();
        }
        else {
            System.err.println("Error - could not connect to game server");
            return;
        }

        //Create game:
        final CreateGameResponse createGameResponse = stubs.createGame.sendAndWait(CreateGameRequest.newBuilder()
                .setWidth(10)
                .setHeight(10)
                .setDifficulty(Difficulty.EASY_Difficulty)
                .setMaxPlayers(10)
                .build()
        );
        System.out.println(createGameResponse.getMessage());

        //List all games:
        final ListGameResponse listGameResponse = stubs.listGames.sendAndWait(ListGamesRequest.newBuilder()
                .build()
        );
        if (listGameResponse.getStatus() == ListGameResponse.Status.OK) {
            System.out.println("list ok");
            listOfWorlds = new ArrayList<>();
            for (MAWorldProto world : listGameResponse.getWorldsList()) {
                listOfWorlds.add(world.toObject());
            }
        }
        else {
            System.err.println(createGameResponse.getMessage());
        }

        System.out.println("Worlds: ");
        for (MAWorld world : listOfWorlds) {
            System.out.println(world.getName() + " (" + world.getMaxRows() + ", " + world.getMaxCols() + ")");
        }
        if (listOfWorlds.isEmpty()) {
            System.err.println("Error - no worlds to join!");
            return;
        }
        System.out.println("Ok, joining first world by default...");

        final JoinGameResponse joinGameResponse = stubs.joinGame.sendAndWait(JoinGameRequest.newBuilder()
                .setGameSessionID(gameSession.getId())
                .setGameID(listOfWorlds.get(0).getId())
                .setPartialStatePreference(PartialStatePreferenceProto.newBuilder()
                        .setHeight(10)
                        .setWidth(10)
                )
                .setGameSessionID(gameSession.getId())
                .build()
        );

        if (joinGameResponse.getStatus() == JoinGameResponse.Status.OK) {
            worldSession = joinGameResponse.getWorldSession().toObject();
            System.out.println("Joined world " + listOfWorlds.get(0).getName() + ", world session ID: " + worldSession.getWorldID());
        }
        else {
            System.err.println("Error - Failed to join world: " + joinGameResponse.getMessage());
            return;
        }

        //Get the initial state:
        final GetStateResponse getStateResponse = stubs.getState.sendAndWait(GetStateRequest.newBuilder()
                .setWorldSessionID(worldSession.getId())
                .build()
        );

        if (getStateResponse.getStatus() == GetStateResponse.Status.OK) {
            final MAPartialStateProto partialState = getStateResponse.getPartialState();
            board = new HashMap<>(partialState.getTerrainMap());
            gameState = partialState.getGameState();
            gameForm.initialize();
            //Debug only:
//            board.forEach((s, cell) -> {
//                System.out.println(cell.getPosition().getRow() + ", " + cell.getPosition().getCol() + " -- " + cell.getIsMined());
//            });
        }
        else {
            System.err.println("Error - Could not retrieve initial state " + getStateResponse.getMessage());
            return;
        }

        //Subscribe:
        final SubscribeResponse subscribeResponse = stubs.subscribe.sendAndWait(SubscribeRequest.newBuilder()
                .setGameID(worldSession.getWorldID())
                .setPartialStateHeight(10)
                .setPartialStateWidth(10)
                .setWorldSessionID(worldSession.getId())
                .build()
        );

        if (subscribeResponse.getStatus() == SubscribeResponse.Status.OK) {
            System.out.println("Subscribe ok");
            stubs.updateState.send(UpdateStateRequest.newBuilder()
                    .setWorldSessionID(worldSession.getId())
                    .build()
            );
        }
        else {
            System.err.println("Error - Could not subscribe " + subscribeResponse.getMessage());
        }
    }

    public void reveal(int row, int col) {
        MatrixPosition pos = new MatrixPosition(row, col);
        final RevealResponse revealResponse = stubs.reveal.sendAndWait(RevealRequest.newBuilder()
                .setPosition(pos.toProto())
                .setWorldSessionID(worldSession.getId())
                .build()
        );
        if (revealResponse.getStatus() == RevealResponse.Status.OK) {
            gameState = revealResponse.getPartialState().getGameState();
            board = new HashMap<>(revealResponse.getPartialState().getTerrainMap());
        }
    }

    public void flag(int row, int col) {
        MatrixPosition pos = new MatrixPosition(row, col);
        final RevealResponse flagResponse = stubs.flag.sendAndWait(FlagRequest.newBuilder()
                .setPosition(pos.toProto())
                .setWorldSessionID(worldSession.getId())
                .build()
        );
        if (flagResponse.getStatus() == RevealResponse.Status.OK) {
            gameState = flagResponse.getPartialState().getGameState();
            board = new HashMap<>(flagResponse.getPartialState().getTerrainMap());
        }
    }

    public String getName() {
        return name;
    }

    public ArrayList<MAWorld> getListOfWorlds() {
        return listOfWorlds;
    }

    public void setListOfWorlds(ArrayList<MAWorld> listOfWorlds) {
        this.listOfWorlds = listOfWorlds;
    }

    @Override
    public MAGameSession getGameSession() {
        return gameSession;
    }

    @Override
    public void setGameSession(MAGameSession gameSession) {
        this.gameSession = gameSession;
    }

    @Override
    public MAWorldSession getWorldSession() {
        return worldSession;
    }

    @Override
    public void setWorldSession(MAWorldSession worldSession) {
        this.worldSession = worldSession;
    }

    public GameState getGameState() {
        return gameState;
    }

    public void setGameState(GameState gameState) {
        this.gameState = gameState;
    }

    public HashMap<String, MATerrainCellProto> getBoard() {
        return board;
    }

    public void setBoard(HashMap<String, MATerrainCellProto> board) {
        this.board = board;
    }

    public MAStubManager getStubs() {
        return stubs;
    }

    public static PlayerGameForm getGameForm() {
        return gameForm;
    }

    public static void setGameForm(PlayerGameForm gameForm) {
        MAClient.gameForm = gameForm;
    }

    public static void main(String[] args) {
        int clients = 2;
        for (int i = 0 ; i < clients; i++) {
            MAClient client = new MAClient("localhost", 25000, "player-" + (i + 1));
            client.start();
        }

    }


}
